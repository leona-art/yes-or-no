// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: yesorno/v1/yesorno.proto

package yesornov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "gomini/gen/yesorno/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// YesOrNoServiceName is the fully-qualified name of the YesOrNoService service.
	YesOrNoServiceName = "yesorno.v1.YesOrNoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// YesOrNoServiceAskProcedure is the fully-qualified name of the YesOrNoService's Ask RPC.
	YesOrNoServiceAskProcedure = "/yesorno.v1.YesOrNoService/Ask"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	yesOrNoServiceServiceDescriptor   = v1.File_yesorno_v1_yesorno_proto.Services().ByName("YesOrNoService")
	yesOrNoServiceAskMethodDescriptor = yesOrNoServiceServiceDescriptor.Methods().ByName("Ask")
)

// YesOrNoServiceClient is a client for the yesorno.v1.YesOrNoService service.
type YesOrNoServiceClient interface {
	Ask(context.Context, *connect.Request[v1.AskRequest]) (*connect.Response[v1.AskResponse], error)
}

// NewYesOrNoServiceClient constructs a client for the yesorno.v1.YesOrNoService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewYesOrNoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) YesOrNoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &yesOrNoServiceClient{
		ask: connect.NewClient[v1.AskRequest, v1.AskResponse](
			httpClient,
			baseURL+YesOrNoServiceAskProcedure,
			connect.WithSchema(yesOrNoServiceAskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// yesOrNoServiceClient implements YesOrNoServiceClient.
type yesOrNoServiceClient struct {
	ask *connect.Client[v1.AskRequest, v1.AskResponse]
}

// Ask calls yesorno.v1.YesOrNoService.Ask.
func (c *yesOrNoServiceClient) Ask(ctx context.Context, req *connect.Request[v1.AskRequest]) (*connect.Response[v1.AskResponse], error) {
	return c.ask.CallUnary(ctx, req)
}

// YesOrNoServiceHandler is an implementation of the yesorno.v1.YesOrNoService service.
type YesOrNoServiceHandler interface {
	Ask(context.Context, *connect.Request[v1.AskRequest]) (*connect.Response[v1.AskResponse], error)
}

// NewYesOrNoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewYesOrNoServiceHandler(svc YesOrNoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	yesOrNoServiceAskHandler := connect.NewUnaryHandler(
		YesOrNoServiceAskProcedure,
		svc.Ask,
		connect.WithSchema(yesOrNoServiceAskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/yesorno.v1.YesOrNoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case YesOrNoServiceAskProcedure:
			yesOrNoServiceAskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedYesOrNoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedYesOrNoServiceHandler struct{}

func (UnimplementedYesOrNoServiceHandler) Ask(context.Context, *connect.Request[v1.AskRequest]) (*connect.Response[v1.AskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yesorno.v1.YesOrNoService.Ask is not implemented"))
}
