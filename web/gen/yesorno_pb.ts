// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file yesorno.proto (package yesorno.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message yesorno.v1.AskRequest
 */
export class AskRequest extends Message<AskRequest> {
  /**
   * @generated from field: string question = 1;
   */
  question = "";

  constructor(data?: PartialMessage<AskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yesorno.v1.AskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "question", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AskRequest {
    return new AskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AskRequest {
    return new AskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AskRequest {
    return new AskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AskRequest | PlainMessage<AskRequest> | undefined, b: AskRequest | PlainMessage<AskRequest> | undefined): boolean {
    return proto3.util.equals(AskRequest, a, b);
  }
}

/**
 * @generated from message yesorno.v1.AskResponse
 */
export class AskResponse extends Message<AskResponse> {
  /**
   * @generated from field: string answer = 1;
   */
  answer = "";

  /**
   * @generated from field: bool finish = 2;
   */
  finish = false;

  constructor(data?: PartialMessage<AskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yesorno.v1.AskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "finish", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AskResponse {
    return new AskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AskResponse {
    return new AskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AskResponse {
    return new AskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AskResponse | PlainMessage<AskResponse> | undefined, b: AskResponse | PlainMessage<AskResponse> | undefined): boolean {
    return proto3.util.equals(AskResponse, a, b);
  }
}

